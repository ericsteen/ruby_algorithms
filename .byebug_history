continue
c
continue
coins.inject([]) {|mem, var| mem.any? {|c| c%var == 0} ? mem : mem+[var]}
coins.inject([]) {|mem, var| mem.any? {|c| c%var == 0} ? mem : mem+[var]}.map { |coin| [coin] + hash[key - coin] }
coins.inject([]) {|mem, var| mem.any? {|c| c%var == 0} ? mem : mem+[var]}.map { |coin| [coin] + hash[key - coin] }.reject { |change| change.sum != key }
coins.inject([]) {|mem, var| mem.any? {|c| c%var == 0} ? mem : mem+[var]}.map { |coin| [coin] + hash[key - coin] }.flatten.reject { |change| change.sum != key }
coins.inject([]) {|mem, var| mem.any? {|c| c%var == 0} ? mem : mem+[var]}.map { |coin| [coin] + hash[key - coin] }
key
coins.inject([]) {|mem, var| mem.any? {|c| c%var == 0} ? mem : mem+[var]}.map { |coin| [coin] + hash[key - coin] }.reject { |change| change.sum != key }
coins.inject([]) {|mem, var| mem.any? {|c| c%var == 0} ? mem : mem+[var]}.map { |coin| [coin] + hash[key - coin] }
_.map { |coin| [coin] + hash[key - coin] }
coins.inject([]) {|mem, var| mem.any? {|c| c%var == 0} ? mem : mem+[var]}
coins
coin
key
c
coins
n
coins
